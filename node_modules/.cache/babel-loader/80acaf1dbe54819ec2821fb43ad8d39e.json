{"ast":null,"code":"var _jsxFileName = \"/Users/ayanoomori/udemy-react-redux-crud-application/src/components/events_new.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\nimport { postEvent } from '../actions';\nimport { Link } from 'react-router-dom';\n\nclass EventsNew extends Component {\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  renderField(field) {\n    const input = field.input,\n          label = field.label,\n          type = field.type,\n          _field$meta = field.meta,\n          touched = _field$meta.touched,\n          error = _field$meta.error;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, React.createElement(\"input\", Object.assign({}, input, {\n      placeholder: label,\n      type: type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    })), touched && error && React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, error));\n  }\n\n  async onSubmit(values) {\n    await this.props.postEvent(values);\n    this.props.history.push('/');\n  }\n\n  render() {\n    const handleSubmit = this.props.handleSubmit;\n    return React.createElement(\"form\", {\n      onSubmit: handleSubmit(this.onSubmit),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(Field, {\n      label: \"Title\",\n      name: \"title\",\n      type: \"text\",\n      component: this.renderField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(Field, {\n      label: \"Body\",\n      name: \"body\",\n      type: \"text\",\n      component: this.renderField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      disabled: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }), React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, \"Cancel\")));\n  }\n\n}\n\nconst mapDispatchToProps = {\n  postEvent\n};\n\nconst validate = values => {\n  const errors = {};\n  if (!values.title) errors.title = 'Enter a title, please.';\n  if (!values.body) errors.body = 'Enter a body, please.';\n  return errors;\n};\n\nexport default connect(null, null)(reduxForm({\n  validate,\n  form: 'eventNewForm'\n})(EventsNew));","map":{"version":3,"sources":["/Users/ayanoomori/udemy-react-redux-crud-application/src/components/events_new.js"],"names":["React","Component","connect","Field","reduxForm","postEvent","Link","EventsNew","constructor","props","onSubmit","bind","renderField","field","input","label","type","meta","touched","error","values","history","push","render","handleSubmit","mapDispatchToProps","validate","errors","title","body","form"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form'\nimport { postEvent } from '../actions';\nimport { Link } from 'react-router-dom'\n\nclass EventsNew  extends Component {\n  constructor(props){\n    super(props)\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n  renderField(field){\n    const {input, label, type, meta: {touched, error}} = field\n    return (\n    <div>\n      <input {...input} placeholder={label} type={type} />\n      {touched && error && <span>{error}</span>}\n    </div>\n    )\n  }\n  async onSubmit(values){\n    await this.props.postEvent(values)\n    this.props.history.push('/')\n  }\n  render() {\n    const { handleSubmit } = this.props\n    return (\n      <form onSubmit={handleSubmit(this.onSubmit)}>\n        <div><Field label='Title' name='title' type='text' component={this.renderField} /></div>\n        <div><Field label='Body' name='body' type='text' component={this.renderField} /></div>\n        <div>\n          <input type='submit' value='Submit' disabled={false} />\n          <Link to='/'>Cancel</Link>\n        </div>\n      </form>\n    );\n  }\n}\nconst mapDispatchToProps = ({ postEvent })\n\nconst validate = values => {\n  const errors = {}\n  if (!values.title) errors.title = 'Enter a title, please.'\n  if (!values.body) errors.body = 'Enter a body, please.'\n  return errors\n}\nexport default connect(null, null)(\n  reduxForm({ validate, form:'eventNewForm'})(EventsNew)\n)\n"]},"metadata":{},"sourceType":"module"}