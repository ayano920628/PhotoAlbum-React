{"ast":null,"code":"import _objectWithoutProperties from \"/Users/ayanoomori/PhotoAlbum_R/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/ayanoomori/PhotoAlbum_R/src/privateroute.js\";\nimport React, { Component } from 'react';\nimport { Route, Redirect } from \"react-router-dom\";\nimport AuthService from './services/AuthService'; // ログインチェックを行うサービス.\n\nclass PrivateRoute extends Component {\n  constructor(props) {\n    super(props);\n    this.authApi = new AuthService();\n    this.state = {\n      // ログインチェックが終わるまで、ローディングを表示.\n      loading: true,\n      // ログインチェック結果.\n      isAuthenticated: false\n    };\n  }\n\n  async componentDidMount() {\n    // ログイン状態のチェック.\n    // ここではasync/awaitで非同期に処理しているが、同期処理でもOK.\n    const ok = await this.authApi.checkLogin(); // 結果を反映.\n\n    this.setState({\n      loading: false,\n      isAuthenticated: ok\n    });\n  }\n\n  render() {\n    // ルーティング情報を取得.\n    const _this$props = this.props,\n          Component = _this$props.component,\n          rest = _objectWithoutProperties(_this$props, [\"component\"]); // ログインチェック状態を取得.\n\n\n    const _this$state = this.state,\n          loading = _this$state.loading,\n          isAuthenticated = _this$state.isAuthenticated; // ログインチェック前なら、ローディングを表示.\n\n    if (loading) {\n      return React.createElement(\"div\", {\n        className: \"loading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, \"Loading...\");\n    } // ログインチェック後はルーティング処理を行う.\n\n\n    return React.createElement(Route, Object.assign({}, rest, {\n      render: () => {\n        // 未ログインなら、ログイン画面にリダイレクト.\n        if (!isAuthenticated) {\n          return React.createElement(Redirect, {\n            to: {\n              pathname: '/login',\n              state: {\n                from: this.props.location\n              }\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 49\n            },\n            __self: this\n          });\n        } // ログイン済なら、指定されたコンポーネントを表示.\n\n\n        return React.createElement(Component, Object.assign({}, this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default PrivateRoute;","map":{"version":3,"sources":["/Users/ayanoomori/PhotoAlbum_R/src/privateroute.js"],"names":["React","Component","Route","Redirect","AuthService","PrivateRoute","constructor","props","authApi","state","loading","isAuthenticated","componentDidMount","ok","checkLogin","setState","render","component","rest","pathname","from","location"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,OAAOC,WAAP,MAAwB,wBAAxB,C,CAAkD;;AAElD,MAAMC,YAAN,SAA2BJ,SAA3B,CAAqC;AAEnCK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,OAAL,GAAe,IAAIJ,WAAJ,EAAf;AACA,SAAKK,KAAL,GAAa;AACX;AACAC,MAAAA,OAAO,EAAE,IAFE;AAGX;AACAC,MAAAA,eAAe,EAAE;AAJN,KAAb;AAMD;;AAED,QAAMC,iBAAN,GAA0B;AAExB;AACA;AACA,UAAMC,EAAE,GAAG,MAAM,KAAKL,OAAL,CAAaM,UAAb,EAAjB,CAJwB,CAMxB;;AACA,SAAKC,QAAL,CAAc;AACZL,MAAAA,OAAO,EAAE,KADG;AAEZC,MAAAA,eAAe,EAAEE;AAFL,KAAd;AAID;;AAEDG,EAAAA,MAAM,GAAG;AAEP;AAFO,wBAGmC,KAAKT,KAHxC;AAAA,UAGYN,SAHZ,eAGCgB,SAHD;AAAA,UAG0BC,IAH1B,yDAKP;;;AALO,wBAM8B,KAAKT,KANnC;AAAA,UAMCC,OAND,eAMCA,OAND;AAAA,UAMUC,eANV,eAMUA,eANV,EAQP;;AACA,QAAID,OAAJ,EAAa;AACX,aAAO;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD,KAXM,CAaP;;;AACA,WACE,oBAAC,KAAD,oBAAWQ,IAAX;AAAiB,MAAA,MAAM,EAAE,MAAM;AAC7B;AACA,YAAI,CAACP,eAAL,EAAsB;AACpB,iBAAO,oBAAC,QAAD;AAAU,YAAA,EAAE,EAAE;AAAEQ,cAAAA,QAAQ,EAAE,QAAZ;AAAsBV,cAAAA,KAAK,EAAE;AAAEW,gBAAAA,IAAI,EAAE,KAAKb,KAAL,CAAWc;AAAnB;AAA7B,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,SAJ4B,CAK7B;;;AACA,eAAO,oBAAC,SAAD,oBAAe,KAAKd,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD,OAPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF;AAWD;;AAnDkC;;AAsDrC,eAAeF,YAAf","sourcesContent":["import React, { Component } from 'react'\nimport { Route, Redirect } from \"react-router-dom\"\nimport AuthService from './services/AuthService'  // ログインチェックを行うサービス.\n\nclass PrivateRoute extends Component {\n\n  constructor(props) {\n    super(props)\n    this.authApi = new AuthService()\n    this.state = {\n      // ログインチェックが終わるまで、ローディングを表示.\n      loading: true,\n      // ログインチェック結果.\n      isAuthenticated: false\n    }\n  }\n\n  async componentDidMount() {\n\n    // ログイン状態のチェック.\n    // ここではasync/awaitで非同期に処理しているが、同期処理でもOK.\n    const ok = await this.authApi.checkLogin()\n\n    // 結果を反映.\n    this.setState({\n      loading: false,\n      isAuthenticated: ok\n    })\n  }\n\n  render() {\n\n    // ルーティング情報を取得.\n    const { component: Component, ...rest } = this.props\n\n    // ログインチェック状態を取得.\n    const { loading, isAuthenticated } = this.state\n\n    // ログインチェック前なら、ローディングを表示.\n    if (loading) {\n      return <div className=\"loading\">Loading...</div>\n    }\n\n    // ログインチェック後はルーティング処理を行う.\n    return (\n      <Route {...rest} render={() => {\n        // 未ログインなら、ログイン画面にリダイレクト.\n        if (!isAuthenticated) {\n          return <Redirect to={{ pathname: '/login', state: { from: this.props.location } }} />\n        }\n        // ログイン済なら、指定されたコンポーネントを表示.\n        return <Component {...this.props} />\n      }}\n      />\n    )\n  }\n}\n\nexport default PrivateRoute"]},"metadata":{},"sourceType":"module"}